version: "3.8"

services:
  app:
    image: ${APP_ECR_IMAGE}
    ports:
      - "${APP_PORT}:${APP_PORT}"
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}
    depends_on:
      db:
        condition: service_healthy
    networks:
      app-network:
        aliases:
          - app
    restart: always
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 128M
        reservations:
          cpus: "0.25"
          memory: 64M

  db:
    image: postgres:15-alpine
    container_name: ${DB_HOST}
    hostname: ${DB_HOST}
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_HOST_AUTH_METHOD=trust
      - API_USER=${API_USER}
      - API_PASSWORD=${API_PASSWORD}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./pg_hba.conf:/var/lib/postgresql/data/pg_hba.conf
      - ./init-user-db.sh:/docker-entrypoint-initdb.d/init-user-db.sh
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "psql -U ${DB_USER} -d ${DB_NAME} -h localhost -c 'SELECT 1;'",
        ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      app-network:
        aliases:
          - ${DB_HOST}
    restart: always
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 128M
        reservations:
          cpus: "0.25"
          memory: 64M

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge
